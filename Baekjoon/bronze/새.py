# 1568

# N마리의 새가 나무에 앉아있고 자연수를 배우기 원한다
# 새들은 1부터 모든 자연수를 오름차순으로 노래한다
# 어떤 숫자 K를 노래할 때 K마리의 새가 나무에서 하늘을 향해 날아간다
# 만약 현재 나무에 앉아있는 새의 수가 지금 불러야 하는 수 보다 작을 때
# 1부터 게임을 다시 시작한다
# 나무에 앉아 있는 새의 수 N이 주어질때 하나의 수를 노래하는데
# 1초가 걸린다고 하면 모든 새가 날아가기까지 총 몇 초가 걸리는지 출력하라

# 첫째 줄에 새의 수 N이 주어진다

# 첫째 줄에 정답을 출력

N = int(input())
cnt = 0
i = 1
while N > 0:
    if i <= N:
        N -= i
        i += 1
        cnt += 1
    else:
        i = 1
print(cnt)


# 첫 번째 수를 불렀을 때 1마리의 새가 날아가고, 두 번째 수를
# 불렀을 때 2마리의 새가 날아가는데, 이미 1마리의 새가 날아갔기
# 때문에 남은 새의 수는 1마리이다. 즉, K번째 수를 불렀을 때는
# K마리의 새가 날아가며 나머지 새의 수는 N - K마리가 남게 된다
# 이 문제에서는 N마리의 새만 있으므로 N보다 큰 수를 불렀을 때는
# 다시 1부터 시작해야 한다. 예를 들어 N = 3이면 1을 불렀을 때
# 1마리의 새가 날아가고, 2를 불렀을 때 2마리의 새가 날아가고,
# 3을 불렀을 때 3마리의 새가 날아간다. 4를 불렀을 때는
# 이미 모든 새가 날아갔기 때문에, 다시 1부터 시작해야 한다.
# 따라서, 4를 불렀을 때는 1마리의 새가 날아가고, 5를 불렀을 때는
# 2마리의 새가 날아가게 된다.
# while문을 사용하여 N이 0보다 큰 동안 계속해서 반복한다.
# 반복문에서는 현재 불러야 하는 수를 나타내는 i와 남은 새의
# 수를 나타내는 N을 사용하여 새가 날아가는 패턴에 따라
# i와 N의 값을 조정하고, cnt 변수에 걸리는 시간을 누적한다.
# i가 N보다 큰 경우에는 i를 1로 초기화하여 다시 1부터 시작하는 것을
# 나타낸다. 마지막으로, cnt 변수를 출력하여 모든 새가 날아가는데
# 걸리는 시간을 출력한다. 총 걸리는 시간은 N이 작을 떄는
# O(N)이지만, N이 커질수록 걸리는 시간이 늘어나게 된다.