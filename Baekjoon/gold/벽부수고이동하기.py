# 2206

# N x M의 행렬로 표현되는 맵이 있다
# 맵에서 0은 이동할 수 있는 곳을 나타내고 1은 이동할 수 없는
# 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지
# 이동하려 하는데 이때 최단 경로로 이동하려 한다
# 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데
# 이때 시작하는 칸과 끝나는 칸도 포함해서 센다
# 만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이
# 좀 더 경로가 짧아진다면 벽을 한개까지 부수고 이동하여도 된다
# 한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다
# 맵이 주어졌을 때 최단 경로를 구해내자

# 첫째 줄에 N이 주어진다
# 다음 N개의 줄에 M개의 숫자로 맵이 주어진다
# (1, 1)과 (N, M)은 항상 0이라고 가정

# 첫째 줄에 최단 거리를 출력
# 불가능할 때는 -1 출력

from collections import deque

N, M = map(int, input().split())
graph = [list(map(int, input().strip())) for _ in range(N)]
dx = [1, -1, 0, 0]
dy = [0, 0, -1, 1]
def bfs():
    # 시작점 지정
    q = deque([(0, 0, 1)])
    # 방문 여부와 벽을 부쉈는지 여부를 기록하는 리스트 초기화
    visited = [[[0] * 2 for _ in range(M)] for _ in range(N)]
    # 시작점 방문 체크
    visited[0][0][1] = 1
    while q:
        # 큐에서 하나씩 꺼냄
        a, b, c = q.popleft()
        # 목적지에 도달했다면 해당 지점의 방문 횟수 반환
        if a == N - 1 and b == M - 1:
            return visited[a][b][c]
        for i in range(4):
            x = a + dx[i]
            y = b + dy[i]
            # 이동 가능한 좌표인 경우
            if 0 <= x < N and 0 <= y < M:
                # 벽을 아직 안 부쉈고, 이동 가능한 좌표라면 해당 좌표로 이동
                if graph[x][y] == 0 and c == 1:
                    q.append((x, y, 0))
                # 벽을 이미 부쉈거나, 부수고 이동하는 경우 방문 체크
                elif graph[x][y] == 0 and visited[x][y][c] == 0:
                    visited[x][y][c] = visited[a][b][c] + 1
                    q.append((x, y, c))
    return-1
print(bfs())
# 4580ms
# (0, 0) 위치에서 시작해 벽을 부순 적이 없는 상태(1)로 시작
# 큐에 넣는 값의 형태가 (0, 0, 1)이므로 벽을 부순 적이 없는 상태에서는
# 이전 상태에서 벽을 부순 적이 없는 경우만 큐에 넣음
# if graph[x][y] == 0 and c == 1: 조건문이
# 벽을 부순 적이 없는 경우에는 건너뜀

# 벽을 부수지 않고 이동하는 경우에 대해서 BFS를 수행하면서
# 각 지점까지의 최단 거리를 기록한다. 이후에 이동하는 도중 벽을 만난 경우
# 해당 벽을 부순 후 이동하는 경우에 대해서도 BFS를 수행한다
# 이때 벽을 부수고 이동할 수 있는 횟수가 1번 밖에 주어지지 않으므로
# 이를 체크하기 위해 visited 리스트를 3차원 리스트로 선언하여
# visited[x][y][0]은 벽을 부수고 이동하지 않은 경우에 해당하는 지점
# (x, y)까지의 최단 거리를, visited[x][y][1]은 벽을 부수고 이동한 경우
# 해당하는 지점 (x, y)까지의 최단 거리를 기록한다
# BFS를 수행할 때, 큐에 (x, y, 0)을 추가하는 경우는 벽을 부수지 않고
# 이동하는 경우에 해당하며, (x, y, 1)을 추가하는 경우는 벽을 부수고
# 이동하는 경우에 해당한다. 이때 visited[x][y][c]가 0이 아니라면
# 이미 방문한 지점이므로 큐에 추가하지 않는다.
# 따라서 위와 같은 방법으로 BFS를 수행하면, 시작점 (0, 0)부터
# 목적지 (N - 1, M -1)까지의 최단 거리를 구할 수 있다