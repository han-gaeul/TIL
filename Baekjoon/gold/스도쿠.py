# 2580

# 스도쿠는 18세기 스위스 수학자가 만든 '라틴 사각형'이란 퍼즐에서 유래한 것으로
# 현재 많은 인기를 누리고 있다. 이 게임은 아래 그림과 같이 가로, 세로
# 각각 9개씩 총 81개의 작은 칸으로 이루어진 정사각형 판 위에서 이뤄지는데
# 게임 시작 전 일부 칸에는 1부터 9까지의 숫자 중 하나가 쓰여있다
# 나머지 반 칸을 채우는 방식은 다음과 같다
# 1. 각각의 가로줄과 세로줄에는 1부터 9까지의 숫자가 한 번씩만 나타나야 한다
# 2. 굵은 선으로 구분되어 있는 3 x 3 정사각형 안에도 1부터 9까지의
# 숫자가 한 번씩만 나타나야 한다
# 위의 예의 경우 첫째 줄에는 1을 제외한 나머지 2부터 9까지의
# 숫자들이 이미 나타나 있으므로 첫째 줄 빈칸에는 1이 들어가야 한다
# 또한 위쪽 가운데 위치한 3 x 3 정사각형의 경우에는 3을 제외한
# 나머지 숫자들이 이미 쓰여있으므로 가운데 빈 칸에는 3이 들어가야 한다
# 게임 시작 전 스도쿠 판에 스여 있는 숫자들의 정보가 주어질 때 
# 모든 빈칸이 채워진 최종 모습을 출력하라

# 아홉 줄에 걸쳐 한 줄에 9개씩 게임 시작 전 스도쿠판 각 줄에
# 쓰여있는 숫자가 한 칸씩 띄워서 차례로 주어진다
# 스도쿠 판의 빈 칸의 경우에는 0이 주어진다
# 스도쿠 판을 규칙대로 채울 수 없는 경우의 입력은 주어지지 않는다

# 모든 빈칸이 채워진 스도쿠 판의 최종 모습을 아홉 줄에 걸쳐
# 한 줄에 9개씩 한 칸씩 띄워서 출력
# 스도쿠 판을 채우는 방법이 여럿인 경우 그 중 하나만 출력

def dfs(idx):
    # 빈칸을 모두 채웠으면 True 반환
    if idx >= len(node):
        return True
    # 빈칸의 좌표 i, j를 가져옴
    i, j = node[idx]
    # 현재 칸이 속한 3 x 3 박스의 좌측 상단 좌표 계산
    r, c = (i // 3) * 3, (j // 3) * 3
    nums1 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])
    # 현재 칸의 가로, 세로, 3 x 3 박스에 이미 채워진 숫자들의 집합을 만듦
    nums2 = set(sudoku[i] + [sudoku[k][j] for k in range(9)] + sudoku[r][c:c + 3] + sudoku[r + 1][c:c + 3] + sudoku[r + 2][c:c + 3])
    # 가능한 숫자 집합에서 nums2에 포함되지 않는 숫자를
    # 하나씩 대입해보며 다음칸으로 이동
    for num in nums1 - nums2:
        sudoku[i][j] = num
        if dfs(idx + 1):
            return True
        # 만약 현재 대입한 숫자로는 문제를 해결할 수 없다면 이전 상태로 되돌림
        sudoku[i][j] = 0
    # 가능한 숫자가 없다면 이전 상태로 되돌림
    return False
sudoku = [list(map(int, input().split())) for _ in range(9)]
# 빈칸의 좌표를 저장
node = [(i, j) for i in range(9) for j in range(9) if sudoku[i][j] == 0]
dfs(0)
for i in range(9):
    for j in range(9):
        print(sudoku[i][j], end=' ')
    print()
# pypy3으로 제출해야 정답 처리 됨
# python3으로 제출하면 시간 초과



# 이 문제를 해결하기 위해서 각 칸에 가능한 숫자를 대입해보며
# 그 숫자가 다음에 나타날 숫자와도 충돌이 없는지 검새해야 한다
# DFS 알고리즘은 모든 가능한 경우를 탐색하며
# 가능한 경우 중 하나라도 문제를 해결할 수 있따면 그것이 최적의 해이다
# 이 코드에서는 DFS 알고리즘을 사용해 빈칸을 숫자로 채워넣는다
# 빈칸의 좌표를 찾아내고 가능한 숫자를 하나씩 대입해보며 다음 빈칸으로 이동한다
# 만약 현재 대입한 숫자로 문제를 해결할 수 있다면 그대로 반환하고 종료하지만
# 그렇지 않다면 다른 숫자를 대입해보고, 모든 가능한 숫자를 대입해도
# 문제를 해결할 수 없다면 이전 상태로 되돌아간다