# 9466

# 이번 가을학기에 '문제 해결' 강의를 신청한 학생들은 텀 프로젝트를
# 수행해야 한다. 프로젝트 팀원 수에는 제한이 없다. 심지어 모든 
# 학생들이 동일한 팀의 팀원인 경우와 같이 한 팀만 있을 수도 있다
# 프로젝트 팀을 구성하기 위해, 모든 학생들은 프로젝트를 함께하고
# 싶은 학생을 선택해야 한다. 단, 한 명만 선택할 수 있다
# 혼자 하고 싶어하는 학생은 자기 자신을 선택하는 것도 가능하다
# 학생들이(s1, s2, ..., sr)이라 할 때, r = 1이고, s1이 s1을 선택하는 경우나,
# s1이 s2를 선택하고, s2가 s3를 선택하고, ..., sr-1이 sr을 선택하고,
# sr이 s1을 선택하는 경우에만 한 팀이 될 수 있다
# 예를 들어, 한 반에 7명의 학생이 있다고 하자. 학생들을 1번부터
# 7번으로 표현할 때, 선택의 결과는 다음과 같다
# 1 2 3 4 5 6 7
# 3 1 3 7 3 4 6
# 위의 결과를 통해 (3)과 (4, 6, 7)이 팀을 이룰 수 있다
# 1, 2, 5는 어느 팀에도 속하지 않는다
# 주어진 선택의 결과를 보고 어느 프로젝트 팀에도 속하지 않는
# 학생들의 수를 계산하라

# 첫째 줄에 테스트 케이스의 개수 T가 주어진다
# 각 테스트 케이스의 첫 줄에는 학생의 수가 정수 n으로 주어진다
# 각 테스트 케이스의 둘째 줄에는 선택된 학생들의 번호가 주어진다
# 모든 학생들은 1부터 n까지 번호가 부여된다

# 각 테스트 케이스마다 한 줄에 출력하고
# 각 줄에는 프로젝트 팀에 속하지 못한 학생들의 수를 나타내면 된다

import sys
# 재귀함수 호출 최대 깊이를 늘림
sys.setrecursionlimit(111111)

def dfs(x):
    global res
    # 방문 처리를 하고 사이클을 이루는 노드 추가
    visited[x] = True
    cycle.append(x)
    # 다음 노드를 number 변수에 저장
    number = numbers[x]
    # 다음 노드를 방문한 적이 있다면
    if visited[number]:
        # 다음 노드가 사이클을 이루는 노드인 경우
        if number in cycle:
            # 사이클을 이루는 노드들을 결과 리스트에 추가
            res += cycle[cycle.index(number):]
        return
    else:
        dfs(number)
T = int(input())
for _ in range(T):
    # 학생 수를 입력 받고 선택된 학생들의 번호를 리스트에 저장
    N = int(input())
    numbers = [0] + list(map(int, input().split()))
    # 방문 여부를 저장하는 리스트 초기화
    visited = [True] + [False] * N
    # 결과 리스트 초기화
    res = []
    # 모든 노드를 탐색
    for i in range(1, N + 1):
        # 방문하지 않은 노드를 찾으면
        if not visited[i]:
            # 사이클을 이루는 노드들을 저장하는 리스트 초기화
            cycle = []
            # 해당 노드를 시작으로 DFS 탐색
            dfs(i)
    print(N - len(res))



# 재귀 함수는 자기 자신을 호출하는 방식으로 동작하며
# 이 때마다 새로운 스택 프레임이 생성된다. 재귀 함수 호출이 많아질수록
# 이 스택 프레임이 쌓이게 되는데, 이때 스택의 크기가 제한되어 있으면
# 스택 오버플로우가 발생할 수 있다. 이러한 이유 때문에 재귀 함수
# 호출의 최대 깊이를 1000으로 제한하고 있다.
# 따라서 sys.setrecursionlimit 함수를 사용해 재귀 함수 
# 호출 최대 깊이를 늘린다

# 주어진 학생 번호들의 순열에서 몇 개의 사이클이 있는지 찾는 문제
# 예를 들어, [2, 3, 1]이 주어졌을 때, 1 > 2 > 3 > 1이라는 사이클이
# 형성되기 때문에 전체 학생 중에서 하나의 학생을 선택할 수 없다
# 이러한 사이클을 찾기 위해 dfs 알고리즘을 사용할 수 있다
# 이 코드에서는 각 노드를 시작점으로 dfs 탐색을 하면서 방문
# 여부를 체크한다. 만약 다음 노드가 이미 방문한 노드이면서
# 사이클을 이루는 노드인 경우, 이전 노드부터 다시 탐색하면서
# 사이클을 이루는 노드들을 결과 리스트에 추가한다.
# 이때, 이미 사이클을 이루는 노드들은 사이클의 시작점부터
# 결과 리스트에 추가한다
# 위와 같은 과정으로 모든 노드를 탐색하면서 사이클을 찾으면
# 전체 학생 수에서 사이클을 이루는 학생 수를 뺀 값을 출력한다