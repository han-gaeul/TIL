# 11047

# 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다
# 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다
# 이때 필요한 동전 개수의 최솟값을 구하라

# 첫째 줄에 N과 K가 주어진다
# 둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다

# 첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값 출력

N, K = map(int, input().split())
coins = [int(input()) for _ in range(N)]
cnt = 0
# 동전 리스트를 큰 순서대로 정렬하고
# 가장 큰 동전부터 사용해 필요한 동전 개수를 계산
for i in range(N - 1, -1, -1):
    # 동전의 합이 K원이 되면 반복 종료
    if K == 0:
        break
    # 현재 동전으로 만들 수 있는 최대 개수를 계산하여 cnt에 더함
    cnt += K // coins[i]
    # 나머지 금액을 다음으로 큰 동전부터 계속해서 계산
    K %= coins[i]
print(cnt)



# 이 문제는 그리디 알고리즘을 사용해 해결할 수 있다
# 그리디 알고리즘은 매 순간 최선의 선택을 해 최종적인
# 답을 찾아내는 알고리즘이다
# 이 알고리즘을 사용해 큰 동전부터 사용해 최소한의 동전
# 개수로 만들고자 하는 금액을 만들어간다.
# 예를 들어, 동전의 가치가 1, 5, 10원이고 26원을 만들고자 한다면
# 가장 큰 동전인 10원으로 2개, 그 다음으로 큰 5원으로 1개,
# 마지막으로 1원 동전으로 1개를 사용해 26원을 만들 수 있다
# 이 경우 필요한 동전 개수는 1개이다
# 그리디 알고리즘을 사용하는 이유는 동전의 가치가 배수 형태로
# 주어지는 경우 항상 최적의 답을 찾아준다는 점이다
# 이는 현재 상황에서 가장 큰 동전부터 사용하는 것이
# 항상 최적의 선택이 되기 때문이다