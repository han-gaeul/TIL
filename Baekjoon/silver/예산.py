# 2512

# 국가의 역할 중 하나는 여러 지방의 예산요청을 심사하여
# 국가의 예산을 분배하는 것이다. 국가예산의 총액은 
# 미리 정해져있어서 모든 예산요청을 배정해 주기는 어려울
# 수도 있다. 그래서 정해진 총액 이하에서 가능한 한
# 최대의 총 예산을 다음과 같은 방법으로 배정한다
# 1. 모든 요청이 배정될 수 있는 경우 요청한 금액 그대로 배정
# 2. 모든 요청이 배정될 수 없는 경우 특정한 정수 상한액을
# 계산하여 그 이상인 예산요청에는 모두 상한액을 배정한다
# 상한액 이하의 예산요청에 대해서는 요청한 금액을 그대로 배정
# 예를 들어, 전체 국가예산이 485이고 4개 지방의 예산요청이
# 각각 120, 110, 140, 150이라고 하자. 이 경우 상한액을 127로
# 잡으면 위의 요청들에 대해서 각각 120, 110, 127, 127을 배정하고
# 그 합이 484로 가능한 최대가 된다 
# 여러 지방의 예산요청과 국가예산의 총액이 주어졌을 때
# 위의 조건을 모두 만족하도록 예산을 배정하라

# 첫째 줄에는 지방의 수를 의미하는 정수 N이 주어진다
# 다음 줄에는 각 지방의 예산요청을 표현하는 N개의 정수가
# 빈칸을 사이에 두고 주어진다
# 그 다음 줄에는 총 예산을 나타내는 정수 M이 주어진다

# 첫째 줄에는 배정된 예산들 중 최댓값인 정수를 출력

n = int(input())
requests = list(map(int, input().split()))
m = int(input())
start = 0
# 예산 요청의 최댓값을 구함
end = max(requests)
while start <= end:
    mid = (start + end) // 2
    # 상한액 이상의 요청은 모두 상한액으로 배정
    total = sum([mid if r > mid else r for r in requests])
    # 모든 요청을 만족할 수 있는 경우
    # 상한액을 높여 더 큰 값을 찾음
    if total <= m:
        start = mid + 1
    # 만족하지 못하는 경우
    # 상한액을 낮춰 더 작은 값을 찾음
    else:
        end = mid - 1
print(end)



# 만약 상한액을 초과하는 요청이 있다면, 상한액을
# 요청금액으로 대체한다. 즉, 상한액 이상의 요청은
# 모두 상한액으로 배정한다. 이렇게 상한액을 설정하면
# 국가예산의 총액 이내에서 가능한 최대의 예산을
# 배정할 수 있다. 
# 예산요청 중에서 최댓값을 상한액으로 정한다.
# 이 최댓값을 상한액으로 두고 예산을 배정한 후,
# 모든 요청을 만족할 수 있는 경우, 상한액을 높여
# 더 큰 값을 찾는다. 만약 모든 요청을 만족하지 못하면
# 상한액을 낮춰 더 작은 값을 찾는다. 
# 따라서 이 문제를 해결하기 위해 상한액을 이분탐색
# 알고리즘을 사용해야 한다. 이 코드는 상한액을
# 최댓값으로 설정한 후, 조건을 만족할 때까지
# 상한액을 조정하는 과정을 반복한다.