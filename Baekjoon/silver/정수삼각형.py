# 1932

#            7
#         3   8
#       8   1   0
#    2   7   4   4
# 4   5   2   6   5
# 위 그림은 크기가 5인 정수 삼각형의 한 모습이다
# 맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여
# 아래층으로 내려올 때 이제까지 선택된 수의 합이 최대가 되는 경로를
# 구하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽
# 도는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다

# 첫째 줄에 삼각형의 크기 n이 주어지고
# 둘째 줄부터 n + 1번째 줄까지 정수 삼각형이 주어진다

# 첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력

n = int(input())
d = [list(map(int, input().split())) for _ in range(n)]
for i in range(1, n):
    for j in range(0, i + 1):
        if j == 0:
            d[i][0] += d[i - 1][0]
        elif j == i:
            d[i][j] += d[i - 1][j - 1]
        else:
            d[i][j] += max(d[i - 1][j - 1], d[i - 1][j])
print(max(d[n - 1]))



# 문제에서는 파스칼의 삼각형의 가장 하단에 위치한 값을 구해야 한다
# 입력으로 주어진 삼각형의 각 원소들에 대해 이전 층의 값들을
# 이용해 합을 구해나가는 방식으로 가장 하단의 값을 구해야 한다.
# 이를 위해서 이 코드에서는 이차원 배열 d를 사용한다
# 이 배열은 입력으로 주어진 삼각형의 크기만큼의 행과 열을 가지며,
# 입력으로 주어진 삼각형의 값을 저장한다.
# 그리고 이 배열의 각 행마다 다음과 같은 연산을 수행한다
# 1. 첫번째 원소는 이전 층의 첫번째 원소와 더한 값을 저장한다
# 2. 마지막 원소는 이전 층의 마지막 원소와 더한 값을 저장한다
# 3. 그 외의 원소는 이전 층에서 대각선 왼쪽 위와 대각선 위의
# 두 원소 중 더 큰 값을 더한 값을 저장한다
# 연산을 수행하고 배열 d의 마지막 행에서 가장 큰 값을 출력하면
# 문제의 답을 구할 수 있다. 이는 파스칼의 삼각형에서
# 가장 하단의 값이 가장 큰 값이기 때문이다.