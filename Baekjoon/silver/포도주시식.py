# 2156

# 효주는 포도주 시식회에 갔다. 그 곳에 갔더니 테이블 위에
# 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여있었다
# 효주는 포도주 시식을 하려고 하는데 여기에는 다음과 같은
# 두 가지 규칙이 있다.
# 1. 포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고
# 마신 후에는 원래 위치에 다시 놓아야 한다
# 2. 연속으로 놓여 있는 3잔을 모두 마실 수는 없다
# 효주는 될수 있는대로 많은 양의 포도주를 맛보기 위해서
# 어떤 포도주 잔을 선택해야 할지 고민하고 있다
# 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 
# 테이블 위에 놓여있고 각 포도주 잔에 들어있는 포도주의
# 양이 주어졌을 때, 가장 많은 양의 포도주를 마실 수 있게 하자
# 예를 들어, 6개의 포도주 잔이 있고 각각의 잔에 순서대로
# 6, 10, 13, 9, 8, 1만큼의 포도주가 들어 있을 때
# 첫번째, 두번째, 네번째, 다섯번째 포도주 잔을 선택하면
# 총 포도주 양이 33으로 최대로 마실 수 있다

# 첫째 줄에 포도주 잔의 개수 n이 주어진다
# 둘째 줄부터 n + 1까지 포도주 잔에 들어있는 포도주의 양이
# 순서대로 주어진다

# 첫째 줄에 최대로 마실 수 있는 포도주의 양을 출력

n = int(input())
# 0번째 인덱스를 추가해 1부터 n까지의 잔을 표현
wines = [0] + [int(input()) for _ in range(n)]
# 잔이 1개인 경우 해당 잔의 양이 최대 양이 됨
if n == 1:
    print(wines[1])
else:
    # dp 초기화
    dp = [0, wines[1], wines[1] + wines[2]] + [0] * (n - 2)
    for i in range(3, n + 1):
        # 이전에 마신 포도주 잔을 포함하는 경우(1),
        # 마시지 않는 경우(2),
        # 2번 이전에 마신 잔까지 포함하는 경우(3) 중 최대값 저장
        dp[i] = max(dp[i - 1], dp[i - 2] + wines[i], dp[i - 3] + wines[i - 1] + wines[i])
    # 마지막 포도주 잔까지 고려한 최대 마실 양 출력
    print(dp[n])



# 현재 포도주 잔의 번호를 i라고 하면, 이번에 선택할 포도주 잔의
# 경우의 수는 다음과 같이 3가지로 나누어진다
# 1. i번째 포도주 잔을 선택하지 않는 경우 : dp[i] = dp[i - 1]
# 2. i번째 포도주 잔을 선택하고, i - 1번째 포도주 잔을 선택하지 않는 경우
# dp[i] = dp[i - 2] + wines[i]
# 3. i번째 포도주 잔을 선택하고, i - 1번째 포도주 잔을 선택하고,
# i - 2번째 포도주 잔을 선택하지 않는 경우
# dp[i] = dp[i - 3] + wines[i - 1] + wines[i]
# 위의 3가지 경우 중에서 가장 많은 양의 포도주를 선택하는
# 경우를 구하면 된다. 이때, 연속으로 3잔을 모두 마실 수 없으므로
# i - 1번째 포도주 잔을 선택하지 않는 경우는 i - 2번째 포도주 잔을
# 선택한 경우와 동일하게 처리할 수 있다.
# 위와 같이 문제를 정의하면 dp 리스트를 다음과 같이 정의할 수 있다
# dp[i][0] : i번째 포도주 잔을 선택하지 않는 경우 최대의 양
# dp[i][1] : i번째 포도주 잔을 선택하고, i - 1번째 포도주 잔을
# 선택하지 않은 경우의 최대 양
# dp[i][2] : i번째 포도주 잔을 선택하고, i - 1번째 포도주 잔을 선택하고,
# i - 2번째 포도주 잔을 선택하지 않은 경우의 최대 양
# 위의 dp 리스트를 이용해 전체 문제의 최적의 답을 구할 수 있다
# 마지막 포도주 잔까지 선택한 경우의 최대 양은
# dp[n][0], dp[n][1], dp[n][2] 중에서 가장 큰 값이다.

# for문에서 3부터 시작하는 이유는 첫번째 잔과 두번째 잔을
# 먼저 선택한 경우에 대해 이미 dp[1]과 dp[2]에 최대 양이 저장되어
# 있기 때문이다. 따라서 3번째 포도주 잔부터 시작하여 현재 잔을
# 선택하지 않는 경우(dp[i - 1]), 바로 이전 잔과 현재 잔을 연속으로
# 선택한 경우(dp[i - 2] + wines[i]), 현재 잔을 선택하고 그 이전
# 잔과 함께 마신 경우(dp[i - 3] + wines[i - 1] + wines[i]) 중에서
# 최대 양을 선택해 dp[i]에 저장한다.

# dp[1]과 dp[2]에 최대 양이 저장되는 이유는 dp[1]은 첫번째 포도주
# 잔을 마셨을 때 최대 양이 되게 설정하고, dp[1] = wines[1]이 된다
# dp[2]는 두번째 포도주 잔을 마셨을 때와, 첫번째와 두번째 포도주 잔을
# 연속해서 마셨을 때의 최대 양 중 큰 값이 된다.
# 즉, dp[2]에는 첫번째와 두번째 포도주 잔을 연속해서 마셨을 때의
# 최대 양이 저장된다. 이는 dp[1]의 값인 wines[1]과
# wines[2]를 더한 것과 같다. 따라서 dp[2] = wines[1] + wines[2]가 된다.