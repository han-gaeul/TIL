# 카카오에 입사한 신입 개발자 네오는 "카카오계정개발팀"에 배치되어
# 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를
# 담당하게 되었다. 네오에게 주어진 첫 업무는 새로 가입하는 유저들이
# 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때 입력된
# 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는
# 프로그램을 개발하는 것이다
# 1. 아이디의 길이는 3자 이상 15자 이하여야 한다
# 2. 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용 가능
# 단, 마침표는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용 불가능
# 네오는 다음과 같이 7단계에 순차적인 처리 과정을 통해 신규 유저가
# 입력한 아이디가 카카오 규칙에 맞는지 검사하고 규칙에 맞지 않은 경우
# 규칙에 맞는 새로운 아이디를 추천해주려고 한다
# 신규 유저가 입력한 아이디가 new_id라고 한다면
# 1. new_id의 모든 대문자를 대응되는 소문자로 치환
# 2. new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를
# 제외한 모든 문자를 제거
# 3. new_id에서 마침표가 2번 이상 연속된 부분을 하나의 마침표로 치환
# 4. new_id에서 마침표가 처음이나 끝에 위치한다면 제거
# 5. new_id가 빈 문자열이라면, new_id에 'a'를 대입
# 6. new_id의 길이가 16자 이상이면 new_id의 첫 15개 문자를 제외한
# 나머지 문자들을 모두 제거. 만약 제거 후 마침표가 new_id의 끝에
# 위치한다면 끝에 위치한 마침표 문자를 제거
# 7. new_id의 길이가 2자 이하라면 new_id의 마지막 문자를
# new_id의 길이가 3이 될 때까지 반복해서 끝에 붙인다
# 신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때
# 네오가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return

import re

def solution(new_id):
    answer = ''
    answer = re.sub('[^a-z\d\-\_\.]', '', new_id.lower())
    answer = re.sub('\.\.+', '.', answer)
    answer = re.sub('^\.|\.$', '', answer)
    if answer == '':
        answer = 'a'
    answer = re.sub('\.$', '', answer[0:15])
    while len(answer) < 3:
        answer += answer[-1:]
    return answer



# 정규 표현식 문자열 치환
# re.sub(정규 표현식, 치환 문자, 대상 문자열)
# ^ :문자열의 시작을 의미 또는 not
# $ : 문자열의 끝을 의미
# | : or
# + : 1회 이상 반복
# [] : 문자열의 집합. [a-z]라면 a부터 z까지
# \d : 숫자