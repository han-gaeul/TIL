# 게임개발자인 '죠르디'는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 한다
# '죠르디'는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이
# 게임 로직에 반영하려고 한다
# 게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며
# 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있다
# 각 격자 칸에는 다양한 인형이 들어있으며 인형이 없는 칸은 빈칸이다
# 모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터
# 차곡차곡 쌓여있다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서
# 가장 위에 있는 인형을 집어 올릴 수 있다.
# 집어 올린 인형은 바구니에 쌓이게 되는데 이때 바구니의 가장 아래 칸부터
# 인형이 순서대로 쌓이게 된다. 만약 같은 모양의 인형 두 개가 바구니에
# 연속해서 쌓이게 되면 두 인형은 떠뜨려지면서 바구니에서 사라지게 된다
# 위 상태에서 이어서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어진다
# 크레인 작동시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서
# 크레인을 작동시키는 경우에는 아무 일도 일어나지 않는다
# 또한 바구니는 모든 인형이 들어갈 수 있을만큼 충분히 크다고 가정한다
# 게임 화면의 격장의 상태가 담긴 2차원 배열 board와 인형을 잡기 위해
# 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때
# 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return

def solution(board, moves):
    # 인형을 쌓는 리스트
    bucket = []
    # 제거된 인형의 개수를 담는 리스트
    answer = []
    for move in moves:
        for i in range(len(board)):
            # 현재 열에 인형이 있다면
            if board[i][move - 1] > 0:
                # 인형을 bucket에 추가하고 현재 열에서 인형 제거
                bucket.append(board[i][move - 1])
                board[i][move - 1] = 0
                # bucket의 마지막 인형과 이전 인형이 같다면
                if bucket[-1:] == bucket[-2:-1]:
                    # 제거된 인형의 개수를 추가하고 bucket에서 제거
                    answer += board[-1:]
                    bucket = bucket[:-2]
                break
    return len(answer) * 2