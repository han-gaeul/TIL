# Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고
# 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤다
# Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의
# 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했다
# Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가
# 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return

def solution(brown, yellow):
    # 전체 카펫의 격자 개수
    total = brown + yellow
    # 가로세로 길이는 항상 total보다 작기 때문에
    # total부터 2까지 역순으로 반복
    for i in range(total, 2, -1):
        if total % i == 0:
            # 가로세로 길이 계산
            j = total // i
            # 카펫의 크기가 맞는지 검증
            if brown == (i + j - 2) * 2 and yellow == (i - 2) * (j - 2):
                return [i, j]



# 이 문제는 노란색과 갈색 격자의 수가 주어졌을 때, 카펫의 크기를
# 구하는 문제이다. 이때, 노란색 격자는 카펫의 중앙에 위치하여 갈색
# 격자는 노란색 격자를 둘러싸고 있다. 이러한 조건을 만족하는 카펫의
# 가로와 세로 크기를 구하는 것이 목적이다
# 우선, 갈색 격자의 수와 노란색 격자의 수를 합하여 전체 격자의 수를 구한다
# 그리고 전체 격자의 수 total을 이용해 카펫의 가로 길이를 i로,
# 세로 길이를 j로 설정한다. 이때, i와 j는 total 이상인 자연수이며,
# 가로 길이가 세로 길이보다 길어야 하므로 i >= j를 만족해야 한다
# 그다음, 갈색 격자의 수와 노란색 격자의 수를 이용해 위에서 구한 i와
# j가 유효한지를 확인한다. 카펫의 전체 크기는 (i * j)이므로, 전체 격자의 수
# total이 (i * j)로 나누어 떨어지는 경우에만 유효하다. 또한, 갈색 격자의 수와
# 노란색 격자의 수를 이용해 조건을 만족하는지도 확인해야 한다. 갈색 격자는
# 노란색 격자를 둘러싸고 있으므로, 갈색 격자의 수는 (i + j - 2) * 2이다.
# 노란색 격자의 수는 (i - 2) * (j - 2)이다. 이 두 조건이 각각 brown과 yellow와
# 일치하면 해당 카펫의 크기가 유효한 것이다.